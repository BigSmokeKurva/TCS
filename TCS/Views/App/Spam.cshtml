@using TCS;
@using TCS.Controllers.Models;
@using Microsoft.EntityFrameworkCore;
@using TCS.BotsManager;
@model TCS.Controllers.AppController;
@{
    bool isSpamStarted;
    SpamConfigurationModel spamConfiguration;
    var auth_token = Guid.Parse(Context.Request.Headers.Authorization);
    var user = await Model.db.GetUser(auth_token);
    isSpamStarted = await Manager.SpamStarted(user.Id, Model.db);
    spamConfiguration = new()
            {
                Threads = user.Configuration.SpamThreads,
                Delay = user.Configuration.SpamDelay,
                Messages = user.Configuration.SpamMessages.ToArray()
            };
}
<link rel="stylesheet" href="~/Spam/style.css" />
<div class="s_container">
    <textarea class="s_textarea">@string.Join('\n', spamConfiguration.Messages)</textarea>
    <div id="s_count-bots">
        Потоки
        <br />
        <input type="number" class="s_number-input" max="50" step="1" value="@spamConfiguration.Threads">
    </div>
    <div id="s_delay">
        Задержка в секундах
        <br />
        <input type="number" class="s_number-input" max="500" step="1" value="@spamConfiguration.Delay">
    </div>
    <div>
        <button class="send-button" id="s_start-stop" state="@(isSpamStarted ? "started" : "stoped")">@(isSpamStarted ? "Остановить" : "Начать")</button>
        <button class="send-button" id="s_save">Сохранить</button>
    </div>
</div>
<script src="~/Spam/script.js"></script>
