@page
@model TCS.Pages.AppModel
@using TCS;
@using TCS.Database
@using Microsoft.EntityFrameworkCore
@using TCS.BotsManager
@using TCS.Follow
@{
    int id;
    string username;
    int count_tokens;
    string streamerUsername;
    bool isAdmin;
    Dictionary<string, bool> botsData;
    var auth_token = Guid.Parse(Request.Cookies["auth_token"]);
    var user = await Model.db.GetUser(auth_token);
    id = user.Id;
    username = user.Username;
    count_tokens = user.Configuration.Tokens.Count;
    streamerUsername = user.Configuration.StreamerUsername;
    isAdmin = user.Admin;
    var bots = user.Configuration.Tokens.Select(x => x.Username);
    var connectedBots = bots.Where(x => Manager.IsConnected(id, x)).ToList();
}

<html>
<head>
    <title>RBTChat</title>
    <link rel="stylesheet" href="~/App/style.css" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body>
    <main>
        <div id="window-container">
            <div id="window">
                <div id="window-body">
                    <span>Задержка между подписками</span>
                    <input type="number" class="number-input" max="500" step="1" value="0">
                </div>
                <div class="window-underline"></div>
                <div id="window-buttons">
                    <button id="save-window-btn">Запустить</button>
                    <button id="cancel-window-btn">Отмена</button>
                </div>
            </div>
        </div>
        <div class="overlay"></div>

        <div id="main_grid">
            <span id="title">RBTChat</span>
            <div class="user-panel">
                @if (isAdmin)
                {
                    <a class="admin-button" href="/AdminPanel">Панель администратора</a>
                }
                <div id="username">
                    <span>@username</span>
                </div>
                <button id="exit-button">ВЫЙТИ</button>
            </div>
            <div class="streamer-username-container">
                <input type="text" placeholder="ник стримера" value="@streamerUsername" disabled />
                <button>
                    <img src="~/App/edit.svg" alt="Редактировать" />
                </button>
            </div>
            <div class="status">
                Канал: <span id="status-streamerusername">@(string.IsNullOrEmpty(streamerUsername) ? "не указан" : streamerUsername)</span>
                <br />
                Статус: <span id="status-streameronline"></span>
                <br />
                Всего ботов доступно: <span>@count_tokens</span>
            </div>
            <div class="menu">
                <div class="button-container">
                    <button class="button" id="spam-btn">Спам</button>
                    <button class="button" id="binds-btn">Бинды</button>
                    <button class="button" id="manual-btn">Ручная отправка</button>
                    <div class="background_underline underline">
                        <div></div>
                    </div>
                    <div class="underline" id="underline"></div>
                </div>
            </div>
            <div id="content-container">
                <div id="bots-list">
                    <span>Ник бота</span>
                    <div class="custom-select" id="func-select">
                        <div class="selected-option">
                            <span>Массовое</span>
                            <div>
                                <img class="triangle-close" src="~/App/triangle.svg" alt="" />
                            </div>
                        </div>
                        <ul class="options" id="func-list">
                            <li id="mas-connect">подключить</li>
                            <li id="mas-disconnect">отключить</li>
                            <li id="mas-follow">follow</li>
                            <li id="mas-unfollow">unfollow</li>
                            <li id="mas-cancelfollow">follow cancel</li>
                        </ul>
                    </div>
                    <div class="background_line"></div>
                    <div id="list-container">
                        <div class="list" id="bots">
                            @{
                                var configuration = await Model.db.Configurations.FindAsync(id);
                                var followedUsernames = (await Model.db.Bots.Where(x => x.Followed.Contains(user.Configuration.StreamerUsername) && bots.Contains(x.Username)).Select(x => x.Username).ToListAsync());
                                var inQueueUsernames = await FollowBot.IsInQueue(configuration.Tokens.Select(x => x.Token), configuration.Id, true);
                                foreach (var bot in bots)
                                {
                                    string followState;
                                     if (inQueueUsernames.Contains(bot))
                                    {
                                        followState = "waiting";
                                    }
                                    else if (followedUsernames.Contains(bot))
                                    {
                                        followState = "followed";
                                    }
                                    else
                                    {
                                        followState = "not-followed";
                                    }
                                    bool isConnected = connectedBots.Contains(bot);
                                    <div class="item" botname="@bot" state="@(isConnected ? "connected" : "disconnected")" followstate="@followState">
                                        <span>@bot</span>
                                        <button class="follow-bot">
                                            <img src="@(followState switch{
                                            "followed" => "/App/unfollow.svg",
                                            "waiting" => "/App/followbot_waiting.svg",
                                            "not-followed" => "/App/follow.svg",
                                            })" alt="">
                                        </button>
                                        <button class="connect-bot">
                                            <img src="@(isConnected ? "/App/disconnect_bot.svg" : "/App/connect_bot.svg")" alt="">
                                        </button>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                    <div id="player-container">
                        <button id="prev-btn">
                            <img src="~/App/back.svg" alt="Назад" />
                        </button>
                        <button id="random-btn">
                            <img src="~/App/random.svg" alt="Случайный" />
                        </button>
                        <button id="next-btn">
                            <img src="~/App/next.svg" alt="Следующий" />
                        </button>
                    </div>
                </div>
                <div id="content"></div>
                <div id="stream-content">
                    <iframe src="https://player.twitch.tv/?channel=@(string.IsNullOrEmpty(streamerUsername) ? "-" : streamerUsername)&parent=rbtchat.site"
                            height="100%"
                            width="100%"
                            frameborder="0"
                            scrolling="no">
                    </iframe>
                    <iframe src="https://www.twitch.tv/embed/@(string.IsNullOrEmpty(streamerUsername) ? "-" : streamerUsername)/chat?darkpopout&parent=rbtchat.site"
                            height="100%"
                            width="100%"
                            frameborder="0"
                            sandbox="allow-scripts allow-same-origin">
                    </iframe>
                </div>

            </div>

        </div>
    </main>
    <div class="notification-container" id="notification-container"></div>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="~/App/script.js"></script>

</body>
</html>
